# Sistema Financeiro - Cursor IDE Rules

## Contexto do Projeto
Estamos desenvolvendo um sistema web (microSaaS) de controle financeiro para entradas e saídas, baseado em uma planilha existente. O sistema é voltado para pequenos empreendedores que precisam de controle financeiro simples e eficiente.

## Stack Tecnológica
- **Framework**: Next.js 15 com App Router
- **Linguagem**: TypeScript (strict mode)
- **Estilização**: Tailwind CSS + shadcn/ui
- **Componentes**: shadcn/ui (Radix UI primitives)
- **Ícones**: Lucide React
- **Estado**: React hooks (useState, useEffect)
- **Formulários**: Controlled components
- **Backend**: Next.js API Routes
- **Banco**: PostgreSQL via Docker
- **ORM**: Prisma
- **Autenticação**: NextAuth.js
- **Deploy**: Docker + Portainer

## Estrutura do Projeto
```
sistema-financeiro/
├── prisma/                # Prisma ORM
│   ├── schema.prisma      # Schema do banco
│   └── migrations/        # Migrations do banco
├── src/
│   ├── app/              # Next.js App Router
│   │   ├── layout.tsx    # Layout principal
│   │   ├── page.tsx      # Página inicial
│   │   ├── globals.css   # Estilos globais
│   │   ├── api/         # Backend API Routes
│   │   │   ├── auth/    # Autenticação
│   │   │   ├── clients/ # API de clientes
│   │   │   ├── sales/   # API de vendas
│   │   │   └── expenses/# API de despesas
│   │   ├── dashboard/   # Dashboard principal
│   │   ├── clients/     # Gestão de clientes
│   │   ├── sales/       # Módulo de vendas
│   │   ├── expenses/    # Módulo de despesas
│   │   ├── cashflow/    # Fluxo de caixa
│   │   └── reports/     # Relatórios
│   ├── components/
│   │   ├── ui/          # Componentes shadcn/ui
│   │   ├── layout/      # Componentes de layout
│   │   ├── clients/     # Componentes de clientes
│   │   ├── sales/       # Componentes de vendas
│   │   └── expenses/    # Componentes de despesas
│   ├── types/
│   │   └── index.ts     # Tipos TypeScript
│   └── lib/
│       ├── prisma.ts    # Cliente Prisma
│       ├── auth.ts      # Config NextAuth
│       └── utils.ts     # Utilitários
├── docker/               # Configs Docker
│   ├── Dockerfile       # Build produção
│   └── nginx.conf       # Config Nginx
├── docker-compose.yml   # Deploy produção
└── docker-compose.dev.yml # Ambiente dev
```

## Funcionalidades Implementadas
1. **Dashboard**: Visão geral com KPIs e resumos
2. **Clientes**: CRUD completo com busca
3. **Vendas (Entradas)**: Sistema flexível de pagamentos
   - Entradas avulsa (valores e datas diferentes)
   - Parcelamento automático do saldo restante
   - Controle de status e progresso
4. **Despesas (Saídas)**: Sistema de categorização e controle
   - Categorias personalizáveis (ex: Projetos, Fornecedores, Veículos, etc.)
   - Parcelamento e controle de vencimentos
   - Etiquetas para melhor organização e relatórios
5. **Fluxo de Caixa**: Visualização cronológica de movimentações
6. **Relatórios**: Inadimplência com filtros e severidade

## Padrões de Código

### Componentes
- Use "use client" para componentes que precisam de interatividade
- Prefira componentes funcionais com hooks
- Use TypeScript strict com interfaces bem definidas
- Componentes reutilizáveis devem estar na pasta correta

### Estilização
- Use Tailwind CSS classes
- Prefira as classes utilitárias do shadcn/ui
- Use variáveis CSS customizadas para cores (--primary, --secondary, etc.)
- Mantenha responsividade (mobile-first)

### Estado e Dados
- Use useState para estado local
- Mock data deve ser realista e funcional
- Mantenha consistência nos tipos TypeScript
- Calcule valores derivados (totais, progressos) dinamicamente

### Formatação
- Moeda: sempre em Real brasileiro (R$) usando Intl.NumberFormat
- Datas: formato brasileiro (DD/MM/AAAA) usando toLocaleDateString
- Percentuais: arredondados usando Math.round()

## Regras de Desenvolvimento

### Nomenclatura
- Componentes: PascalCase (ClientForm, PaymentManager)
- Arquivos: kebab-case para páginas, PascalCase para componentes
- Variáveis e funções: camelCase
- Interfaces: PascalCase iniciando com tipo (Client, Sale, CreateSaleData)

### Organização
- Um componente por arquivo
- Imports organizados: React primeiro, bibliotecas, componentes locais, tipos
- Props sempre tipadas com interface
- Handlers começam com "handle" (handleSave, handleDelete)

### UX/UI
- Sistema usa cores semânticas:
  - Verde: entradas/receitas/positivo
  - Vermelho: saídas/despesas/negativo
  - Azul: informações neutras
  - Laranja/Amarelo: alertas e atenção
- Feedback visual para todas as ações
- Loading states e estados vazios
- Confirmações para ações destrutivas

## Funcionalidades Específicas

### Sistema de Pagamentos Flexível (Vendas)
- Permite entradas avulsas com valores e datas livres
- Calcula automaticamente o saldo restante
- Gera parcelas mensais automaticamente
- Exemplo: Venda R$ 2.000 → Entrada R$ 100 + Entrada R$ 200 + 5x R$ 340

### Sistema de Categorização de Despesas
- Categorias personalizáveis para melhor organização
- Exemplos de categorias: Projetos, Fornecedores, Veículos, Colaboradores, Impostos
- Etiquetas para filtros e relatórios
- Parcelamento flexível similar ao sistema de vendas

### Cálculos Automáticos
- Total pago vs saldo restante
- Progresso percentual de pagamentos
- Saldo acumulado no fluxo de caixa
- Dias de atraso para inadimplência

## Implementações Backend
1. **Autenticação**
   - NextAuth.js com Prisma adapter
   - Login com email/senha
   - Login social (Google)
   - Middleware de proteção

2. **Banco de Dados**
   - PostgreSQL em container
   - Prisma para ORM
   - Migrations automáticas
   - Backup via volumes Docker

3. **API Routes**
   - CRUD para cada módulo
   - Validação com Zod
   - Rate limiting
   - Tratamento de erros

4. **Deploy**
   - Docker multi-stage build
   - Nginx como proxy reverso
   - Portainer para gestão
   - Logs centralizados

## Futuras Implementações
- Exportação de relatórios
- Notificações de vencimento
- Backup automático
- Integração com webhooks

## Debugging e Desenvolvimento
- Use console.log apenas temporariamente
- Trate erros adequadamente com try/catch
- Valide formulários antes de submissão
- Mantenha componentes pequenos e focados

## Comandos Úteis
```bash
npm run dev          # Desenvolvimento
npm run build        # Build de produção
npm run lint         # Verificar linting
```

Sempre mantenha o código limpo, bem documentado e seguindo os padrões estabelecidos. O foco é simplicidade e usabilidade para o usuário final.